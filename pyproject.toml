[project]
name = "property-driven-ml"
version = "0.2.7"
description = "A general framework for property-driven machine learning with logical constraints"
readme = "README.md"
requires-python = ">=3.11"
authors = [
    {name = "Thomas Flinkow"},
    {name = "Gusts Gustavs Grinbergs"}
]
maintainers = [
    {name = "Thomas Flinkow"},
    {name = "Gusts Gustavs Grinbergs"}
]
license = "MIT"
keywords = ["machine learning", "property driven", "constraints", "fuzzy logic", "adversarial training", "neural networks", "pytorch"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Operating System :: OS Independent",
]

dependencies = [
  "idx2numpy>=1.2.3",
  "numpy>=2.3.2",
  "onnx>=1.18.0",
  "onnxruntime>=1.22.1",
  "pandas>=2.3.1",
  "torch>=2.5.1",
  "torchvision>=0.20.1",
]

[project.urls]
Homepage = "https://github.com/ggustavs/property-driven-ml"
Repository = "https://github.com/ggustavs/property-driven-ml"
"Bug Tracker" = "https://github.com/ggustavs/property-driven-ml/issues"
Documentation = "https://github.com/ggustavs/property-driven-ml#readme"



[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
property_driven_ml = ["py.typed"]

[tool.uv]

[[tool.uv.index]]
name = "pypi"
url = "https://pypi.org/simple"

[[tool.uv.index]]
name = "pytorch-cu121"
url = "https://download.pytorch.org/whl/cu121"
explicit = true

[[tool.uv.index]]
name = "pytorch-cpu"
url = "https://download.pytorch.org/whl/cpu"
explicit = true

[tool.uv.sources]
torch = [
  { index = "pytorch-cu121", marker = "sys_platform == 'linux' and platform_machine == 'x86_64'" },
  { index = "pytorch-cpu", marker = "sys_platform == 'linux' and platform_machine == 'aarch64'" },
  { index = "pytorch-cu121", marker = "sys_platform == 'win32' and (platform_machine == 'AMD64' or platform_machine == 'x86_64')" }
]
torchvision = [
  { index = "pytorch-cu121", marker = "sys_platform == 'linux' and platform_machine == 'x86_64'" },
  { index = "pytorch-cpu", marker = "sys_platform == 'linux' and platform_machine == 'aarch64'" },
  { index = "pytorch-cu121", marker = "sys_platform == 'win32' and (platform_machine == 'AMD64' or platform_machine == 'x86_64')" }
]

[dependency-groups]
dev = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "ruff>=0.1.0",
    "pre-commit>=4.3.0",
]
test = [
    "pytest>=8.0.0",
    "pytest-cov>=6.0.0",
    "pytest-xdist>=3.0.0",  # For parallel test execution
]
deploy = [
    "twine>=6.1.0",
    "build>=1.0.0",  # For building packages if needed
]

# Pytest configuration
[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=property_driven_ml",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "-ra",  # Show all test results except passed
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (may take longer to run)",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
